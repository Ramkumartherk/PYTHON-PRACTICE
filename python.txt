# Function to print a right-angled triangle pattern
def print_triangle(n):
    for i in range(1, n + 1):
        print("*" * i)


num_rows = int(input("Enter the number of rows: "))
print_triangle(num_rows)


#sum of all numbers
numbers = [1, 2, 3, 4, 5]


total = 0


for number in numbers:
    total += number


print("The sum of all numbers is:", total)


if else


user_input = float(input("Enter a number: "))


if user_input > 0:
    print("The entered number is positive.")
elif user_input < 0:
    print("The entered number is negative.")
else:
    print("The entered number is zero.")


oops

# Define a Person class
class Person:
    # Constructor to initialize the object with a name and age
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # Method to introduce the person
    def introduce(self):
        print(f"Hi, my name is {self.name}, and I am {self.age} years old.")

# Create instances (objects) of the Person class
person1 = Person("Alice", 30)
person2 = Person("Bob", 25)

# Call the introduce method on the objects
person1.introduce()
person2.introduce()


#even and odd
number = int(input("Enter a number: "))


if number % 2 == 0:
    print(f"{number} is an even number.")
else:
    print(f"{number} is an odd number.")


linear search

def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i  # Return the index if the target is found
    return -1  # Return -1 if the target is not found in the array

# Example usage
my_list = [4, 2, 7, 1, 9, 3]
target_element = 7

result = linear_search(my_list, target_element)

if result != -1:
    print(f"{target_element} found at index {result}")
else:
    print(f"{target_element} not found in the list.")


DICTIONARY

# Creating a dictionary
student = {
    "name": "Alice",
    "age": 25,
    "grade": "A"
}

# Accessing values in the dictionary
print("Name:", student["name"])
print("Age:", student["age"])

# Modifying a value in the dictionary
student["age"] = 26

# Adding a new key-value pair
student["city"] = "New York"

# Removing a key-value pair
del student["grade"]

# Checking if a key exists
if "name" in student:
    print("Name:", student["name"])

# Iterating through keys
print("Iterating through keys:")
for key in student:
    print(key, ":", student[key])

# Iterating through key-value pairs
print("\nIterating through key-value pairs:")
for key, value in student.items():
    print(key, ":", value)




